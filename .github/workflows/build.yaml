---
name: Build

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Create a GitHub Release"
        required: true
        type: boolean
        default: false

      talos_version:
        description: "Talos version"
        required: true
        type: choice
        options:
          - v1.7.6
          - v1.7.5
          - v1.7.4
          - v1.7.3
          - v1.7.2
          - v1.7.1
          - v1.7.0

      device:
        description: "Device"
        required: true
        type: choice
        options:
          - orangepi-5

      #########################
      # Packages
      #########################
      repo_packages:
        description: "Repository to build packages from"
        required: true
        type: string
        default: "siderolabs/pkgs"
      branch_packages:
        description: "Branch to build packages from"
        required: true
        type: string
        default: "main"

      #########################
      # Base
      #########################
      repo_base:
        description: "Repository to build base from"
        required: true
        type: string
        default: "siderolabs/talos"
      branch_base:
        description: "Branch to build base from"
        required: true
        type: string
        default: "main"

      #########################
      # Overlay
      #########################
      repo_overlay:
        description: "Repository to build overlay from"
        required: true
        type: string
        default: "siderolabs/sbc-rockchip"
      branch_overlay:
        description: "Branch to build overlay from"
        required: true
        type: string
        default: "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  actions: write
  contents: write
  packages: write
  pull-requests: read
  statuses: read

env:
  FORCE_COLOR: "1"

  REGISTRY: ghcr.io
  ORGANISATION: ${{ github.repository_owner }}
  PROJECT: ${{ github.event.repository.name }}

  BRANCH_NAME_CURRENT: ${{ github.head_ref || github.ref_name }}
  BRANCH_NAME_DEFAULT: ${{ github.event.repository.default_branch }}

defaults:
  run:
    shell: bash

jobs:
  ##################################################
  # Packages
  ##################################################

  packages:
    name: Packages

    timeout-minutes: 1440
    continue-on-error: false

    runs-on: self-hosted

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v4

      - id: docker_buildx
        name: Setup Docker Buildx
        uses: ./steps/docker-buildx.yaml
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_PACKAGES }}

      - id: make
        name: Setup and run Make
        uses: ./steps/make.yaml
        with:
          repository: ${{ inputs.repo_packages }}
          branch: ${{ inputs.branch_packages }}
          path: ${{ github.workspace }}/_make/packages

      - id: cache_kernel
        name: Cache (kernel)
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-buildx-kernel-${{ hashFiles('_make/packages/kernel/*') }}
          path: kernel-build
          restore-keys: |
            ${{ runner.os }}-buildx-
          save-always: true

      - id: cache_buildx
        name: Cache (buildx)
        uses: reproducible-containers/buildkit-cache-dance@v3
        with:
          cache-map: |
            {
              "kernel-build": "/kernel/build"
            }
          skip-extraction: ${{ steps.cache_kernel.outputs.cache-hit }}

      - id: make_packages
        name: Make packages
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_PACKAGES }}
          TALOS_VERSION: ${{ inputs.talos_version }}
          DEVICE: ${{ inputs.device }}
          REGISTRY: ${{ env.REGISTRY }}
          USERNAME: ${{ github.actor }}
          TAG: ${{ inputs.talos_version }}-${{ inputs.device }}
          DIRECTORY: ${{ github.workspace }}/_make/packages
        run: |
          pushd "${DIRECTORY}"

          export GITHUB_TOKEN

          echo "##### Making kernel config #####"
          make \
            USERNAME="${USERNAME,,}" \
            kernel-olddefconfig

          echo "##### Making packages (kernel)#####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PLATFORM=linux/amd64,linux/arm64 \
            PUSH=true \
            kernel

          echo "##### Making packages (all) #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PLATFORM=linux/amd64,linux/arm64 \
            PUSH=true
          popd

  ##################################################
  # Base
  ##################################################

  base:
    name: Base

    needs:
      - packages

    timeout-minutes: 1440
    continue-on-error: false

    runs-on: self-hosted

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v4

      - id: docker_buildx
        name: Setup Docker Buildx
        uses: ./steps/docker-buildx.yaml
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_PACKAGES }}

      - id: make
        name: Setup and run Make
        uses: ./steps/make.yaml
        with:
          repository: ${{ inputs.repo_base }}
          branch: ${{ inputs.branch_base }}
          path: ${{ github.workspace }}/_make/base

      - id: make_base
        name: Make base
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_PACKAGES }}
          TALOS_VERSION: ${{ inputs.talos_version }}
          DEVICE: ${{ inputs.device }}
          REGISTRY: ${{ env.REGISTRY }}
          USERNAME: ${{ github.actor }}
          TAG: ${{ inputs.talos_version }}-${{ inputs.device }}
          DIRECTORY: ${{ github.workspace }}/_make/base
        run: |
          pushd "${DIRECTORY}"

          export GITHUB_TOKEN

          echo "##### Making installer #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PUSH=true \
            installer

          echo "##### Making talosctl-image #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PUSH=true \
            talosctl-image

          echo "##### Making kernel initramfs #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PLATFORM=linux/amd64,linux/arm64 \
            INSTALLER_ARCH=all \
            PUSH=true \
            kernel initramfs

          echo "##### Making imager #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            INSTALLER_ARCH=all \
            PLATFORM=linux/amd64,linux/arm64 \
            PUSH=true \
            imager

          popd

  ##################################################
  # Overlay
  ##################################################

  overlay:
    name: Overlay

    needs:
      - packages
      - base

    timeout-minutes: 1440
    continue-on-error: false

    runs-on: self-hosted

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v4

      - id: docker_buildx
        name: Setup Docker Buildx
        uses: ./steps/docker-buildx.yaml
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_PACKAGES }}

      - id: make
        name: Setup and run Make
        uses: ./steps/make.yaml
        with:
          repository: ${{ inputs.repo_overlay }}
          branch: ${{ inputs.branch_overlay }}
          path: ${{ github.workspace }}/_make/overlay

      - id: make_overlay
        name: Make overlay
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_PACKAGES }}
          TALOS_VERSION: ${{ inputs.talos_version }}
          DEVICE: ${{ inputs.device }}
          REGISTRY: ${{ env.REGISTRY }}
          USERNAME: ${{ github.actor }}
          TAG: ${{ inputs.talos_version }}-${{ inputs.device }}
          PKGS_PREFIX: ${{ env.REGISTRY }}/${{ github.actor }}
          PKGS: ${{ inputs.talos_version }}-${{ inputs.device }}
          DIRECTORY: ${{ github.workspace }}/_make/overlay
        run: |
          pushd "${DIRECTORY}"

          export GITHUB_TOKEN

          echo "##### Making overlay #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PUSH=true \
            all

          popd

  ##################################################
  # Boot
  ##################################################

  boot:
    name: Boot

    needs:
      - packages
      - base
      - overlay

    timeout-minutes: 1440
    continue-on-error: false

    runs-on: self-hosted

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v4

      - id: docker_buildx
        name: Setup Docker Buildx
        uses: ./steps/docker-buildx.yaml
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_PACKAGES }}

      - id: make
        name: Setup and run Make
        uses: ./steps/make.yaml
        with:
          repository: ${{ inputs.repo_overlay }}
          branch: ${{ inputs.branch_overlay }}
          path: ${{ github.workspace }}/_make/overlay

      - id: imager
        name: Run imager
        uses: ./.github/actions/imager
        with:
          token: ${{ secrets.PAT_PACKAGES }}
          workdir: ${{ github.workspace }}/_make/overlay
          imager_image: ${{ env.REGISTRY }}/${{ github.actor }}/imager:${{ inputs.talos_version }}-${{ inputs.device }}
          overlay_name: ${{ inputs.device }}
          overlay_image: ${{ env.REGISTRY }}/${{ github.actor }}/sbc-rockchip:${{ inputs.talos_version }}-${{ inputs.device }}

      - id: upload_artifacts
        name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.device }}-${{ inputs.talos_version }}
          path: ${{ github.workspace }}/_make/overlay/_out/metal-${{ inputs.device }}-arm64.raw.xz
          if-no-files-found: error
          retention-days: 1

  ##################################################
  # Release
  ##################################################

  release:
    name: Release

    if: ${{ github.event.inputs.release == 'true' }}

    needs:
      - packages
      - base
      - overlay
      - boot

    runs-on: self-hosted

    steps:
      - id: download_artifacts
        name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.device }}-${{ inputs.talos_version }}
          path: ${{ github.workspace }}/_artifacts

      - id: show_artifacts
        name: Show artifacts
        run: |
          ls -lah ${{ github.workspace }}/_artifacts

      - id: calver
        name: Set Calver Version
        run: |
          if [[ "${BRANCH_NAME_CURRENT:-UNKNOWN}" == "${BRANCH_NAME_DEFAULT:-DEFAULT}" ]];
          then
            echo "Set CalVer for default branch"
            echo "package_version=$(date '+%Y-%m-%d')" >> "$GITHUB_OUTPUT"
          else
            echo "Set CalVer for non-default branch"
            echo "package_version=$(date '+%Y.%m.%d')-$(date -d "1970-01-01 UTC $(date +%T)" +%s)" >> "$GITHUB_OUTPUT"
          fi

      - id: check_tags
        name: Check git tags
        env:
          TAG: ${{ steps.calver.outputs.package_version }}
        run: |
          git fetch --tags
          if git show-ref --tags --verify --quiet "refs/tags/$TAG"
          then
            echo "The Release tag ${TAG} already exists, did you forget to bump the version?"
            exit 1
          elif [[ "${BRANCH_NAME_CURRENT:-UNKNOWN}" == "${BRANCH_NAME_DEFAULT:-DEFAULT}" ]];
          then
            echo "Default branch, creating release tag ${TAG}"
            echo "CREATE_TAG=true" >> "${GITHUB_OUTPUT}"
          else
            echo "Non-default branch, skipping release tag ${TAG}"
            echo "CREATE_TAG=false" >> "${GITHUB_OUTPUT}"
          fi

      - id: create_release
        name: Create Release
        if: ${{ steps.check_tags.outputs.CREATE_TAG == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ inputs.device }} v${{ steps.calver.outputs.package_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.calver.outputs.package_version }}
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          append_body: true
          body: |
            ## Images

            Device name: ${{ inputs.device }}
            Talos version: ${{ inputs.talos_version }}

            ```bash
            talosctl upgrade \
              --nodes <your_nodes> \
              --image ${{ env.REGISTRY }}/${{ github.actor }}/installer:${{ inputs.talos_version }}-${{ inputs.device }}
            ```

          files: ${{ github.workspace }}/_artifacts/${{ inputs.device }}-${{ inputs.talos_version }}
