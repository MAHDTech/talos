---
name: Base

on:
  workflow_call:
    inputs:
      registry:
        type: string
        required: true
        description: "The registry to push the packages to"
      username:
        type: string
        required: true
        description: "The username to login to the registry"
      repository:
        type: string
        required: true
        description: "The repository to clone"
      branch:
        type: string
        required: true
        description: "The branch to checkout"
      path:
        type: string
        required: true
        description: "The path to checkout the repository to"
      talos_version:
        type: string
        required: true
        description: "The Talos version to make packages for"
      device:
        type: string
        required: true
        description: "The device to make packages for"

jobs:
  base:
    name: Build Base

    runs-on: self-hosted

    strategy:
      fail-fast: true

    steps:
      - id: dependencies
        name: Dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y jq make

      - id: setup_qemu
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - id: setup_buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - id: login_to_registry
        name: Login to registry (Docker)
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.username }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: crane_setup
        name: Set up Crane
        uses: imjasonh/setup-crane@v0.4

      - id: crane_login
        name: Login to registry (Crane)
        shell: bash
        env:
          CRANE_REGISTRY: ${{ inputs.registry }}
          CRANE_USERNAME: ${{ inputs.username }}
          CRANE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${CRANE_PASSWORD}" | crane auth login "${CRANE_REGISTRY,,}" --username "${CRANE_USERNAME}" --password-stdin

      - id: checkout_repository_make
        name: Checkout repository for make
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          path: ${{ inputs.path }}

      - id: make_base
        name: Make base
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TALOS_VERSION: ${{ inputs.talos_version }}
          DEVICE: ${{ inputs.device }}
          REGISTRY: ${{ inputs.registry }}
          USERNAME: ${{ inputs.username }}
          TAG: ${{ inputs.talos_version }}-${{ inputs.device }}
          DIRECTORY: ${{ inputs.path }}
        run: |
          pushd "${DIRECTORY}"

          export GITHUB_TOKEN

          echo "##### Making installer #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PUSH=true \
            installer

          echo "##### Making talosctl-image #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PUSH=true \
            talosctl-image

          echo "##### Making kernel initramfs #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            PLATFORM=linux/amd64,linux/arm64 \
            INSTALLER_ARCH=all \
            PUSH=true \
            kernel initramfs

          echo "##### Making imager #####"
          make \
            USERNAME="${USERNAME,,}" \
            REGISTRY="${REGISTRY}" \
            TAG="${TAG}" \
            PKGS_PREFIX="${REGISTRY}/${USERNAME,,}" \
            PKGS="${TALOS_VERSION}-${DEVICE}" \
            INSTALLER_ARCH=all \
            PLATFORM=linux/amd64,linux/arm64 \
            PUSH=true \
            imager

          popd
